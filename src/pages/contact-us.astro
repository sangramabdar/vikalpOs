---
import Button from "../components/common/Button.astro";
import Input from "../components/common/Input.astro";
import SectionContainer from "../components/common/section/SectionContainer.astro";
import HeroSection from "../components/HeroSection.astro";
import Layout from "../layouts/Layout.astro";
import Wrapper from "../layouts/Wrapper.astro";
import { cn } from "../utils/cn";

const heroSectionData = {
  headers: ["Get in Touch", "With Our Team Experts"],
  description: `Have questions, need a demo, or wish to discuss how VikalpOS can transform your department? 
Our team is here to help you accelerate digital governance and deliver better outcomes`,
};

const formSectionData = {
  headers: ["What to Expect", "When You Reach Out"],
  options: [
    "Fill out the form and click “Request a Demo",
    "Our team will quickly review your request and reach out to you",
    "We’ll organize a demo tailored to your department’s needs",
  ],
};
---

<Layout>
  <HeroSection
    headers={heroSectionData.headers}
    description={heroSectionData.description}
    hideButton
  >
    <div class="h-fit slideInLeft">
      <img
        src="https://res.cloudinary.com/senpiper/image/upload/v1754643545/senpiper_assets/VikalpOS/contact-us/Rectangle_10_nu6xdu.png"
        alt="#"
        class="w-fit"
      />
    </div>
  </HeroSection>

  <SectionContainer>
    <Wrapper>
      <div class={`grid grid-cols-1 lg:grid-cols-2 gap-10`}>
        <form id="contact-us-form" class="flex flex-col gap-6 slideInUp">
          <Input
            title="Name"
            name="name"
            type="text"
            placeholder="for eg John Doe"
            required
          />
          <Input
            title="Email"
            name="email"
            type="email"
            placeholder="for eg John Doe@gmail.com"
            required
          />
          <Input title="Organization Name" name="organizationName" required />
          <Input title="Message" name="message" id="message" textArea />
          <div class="flex justify-center">
            <Button type="submit" text="Requst a demo" id="submitButton" />
          </div>
        </form>
        <div class="flex flex-col justify-center slideInDown gap-3 md:gap-4">
          <h3
            class="text-typography-80 font-bold text-left text-xl md:text-3xl slideInDownSub"
          >
            {
              formSectionData.headers.map((header, index) => (
                <span
                  class={index == 0 ? "text-typography-80" : "text-primary-70"}
                >
                  {header}
                </span>
              ))
            }
          </h3>
          <ul class="space-y-2 text-left self-start md:text-xl">
            {
              formSectionData.options.map((value, index) => (
                <li class={cn("flex gap-2 slideInDownSub transition-all")}>
                  <img src="https://res.cloudinary.com/senpiper/image/upload/v1753788029/senpiper_assets/VikalpOS/icons/check_circle_en544w.svg" />
                  <span class="text-typography-80 text-base">{value}</span>
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </Wrapper>
  </SectionContainer>
</Layout>

<script>
  const formData: any = {};

  const form = document.getElementById("contact-us-form");

  const submitBtn = document.getElementById(
    "submitButton"
  ) as HTMLButtonElement;

  const inputFields = document
    .getElementById("contact-us-form")
    ?.getElementsByTagName("input") as any;

  function getUUID() {
    const s4 = () =>
      Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);

    return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
  }

  function buidData(formData: any) {
    const jsonFormData = { ...formData };

    let groupId = "23195170-209a-447f-af76-e924df1475cc";
    let formId = "483100ea-7bb5-43e9-ae9c-7d438a1e18c7";

    // const path = window.location?.href || "";
    // if (path.includes("staging") || path.includes("localhost")) {
    //   groupId = "f5026482-ac45-492a-9914-7959de2073e9";
    //   formId = "f82e5ce7-4a54-4789-967f-d3f7724c6d82";
    // }

    const answer = {
      answer: {
        f: jsonFormData["name"],
        e: jsonFormData["email"],
        o: jsonFormData["organizationName"],
        m: jsonFormData["message"],
      },
      groupId: groupId,
      formId: formId,
      hash: getUUID(),
      referer: "WEB",
    };
    return answer;
  }

  async function postForm(formData: any) {
    try {
      let url = "https://tech.senpiper.com/api/core/form/answer/public";
      // const path = window.location?.href || "";
      // if (path.includes("staging") || path.includes("localhost")) {
      //   url = "https://rb.staging.senpiper.com/api/core/form/answer/public";
      // }
      await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Auth: "bR9i2HU9cfpNYJc7rD9rbA==.Xz+NJJLJfg78T7MoYCEid0b1kJuCzg/rhbf5B5S483b4WXErLlXcYFhWUbUt107ROkAZBaWOCE8RQfPgBJDXcibkGvXqivO1T95oCQHqgfe9HoedYNF6JzLqfkx1dkHraLy3p0aSre/Hx5qYqabMmLUBpBkhtUqb0HlyTgonKLKv+nEmjYGzjJCqRmf0Wvf19CDqPhJ5bSylV4vMUTN//4rr+6kf8Zxsv4z7WuViIxhvveTJIx6xjRFm0BCuwh1nWse4Ftab7dBxinCZJbJcKVxSxvrND/jwu0x3OrVgM+1YE9Y8H9OcIoBuv5q+GR+XVni/HhcvJgMGiAxR7/ZG1FEQq4cV9IB1nbXS7r15+ot5v5r6tbVwRdBQ2AjVLRDRyq9A1MRU06KLAEKuky7kYQ==.WGhyHAVdvlLh4/+Dxmc0b98Sb+ITfhSCNTCWwQzGUas=",
        },
        body: JSON.stringify(formData),
      });

      return true;
    } catch (err) {
      console.error(`Error on POST: ${err}`);
      return null;
    }
  }

  async function submitFormToBackend(e: Event) {
    e.preventDefault();
    const fields = document.getElementById("fields");
    const successMsg = document.getElementById("successMsg");
    submitBtn.disabled = true;
    submitBtn.innerHTML = "Sending request";
    submitBtn.classList.remove("hvr-sweep-to-right");

    const jsonFormData = buidData(formData);

    const response = await postForm(jsonFormData);

    setTimeout(() => {
      if (response) {
        submitBtn.innerHTML = "Request Submitted";
        submitBtn.classList.remove("bg-light-violet");
        submitBtn.classList.add("bg-green");
        fields.classList.add("hidden");
        successMsg.classList.remove("hidden");
      } else {
        submitBtn.innerHTML = "Request failed, please try again";
        submitBtn.classList.remove("bg-light-violet");
        submitBtn.classList.add("bg-[#FD464E]");
        setTimeout(() => {
          submitBtn.disabled = false;
          submitBtn.innerHTML = "Get a demo";
          submitBtn.classList.add("bg-light-violet");
          submitBtn.classList.remove("bg-[#FD464E]");
          submitBtn.classList.add("hvr-sweep-to-right");
        }, 4000);
      }
    }, 2000);
  }

  const handleOnSubmit = (event: Event) => {
    event.preventDefault();

    submitFormToBackend(event);
  };

  form?.addEventListener("submit", handleOnSubmit);

  const handleOnChange = (key: string) => (event: any) => {
    const value = event.target?.value;
    formData[key] = value;
  };

  for (let i = 0; i < inputFields?.length; i++) {
    const key = inputFields[i]?.name;

    inputFields[i].addEventListener("input", handleOnChange(key));
  }
</script>
