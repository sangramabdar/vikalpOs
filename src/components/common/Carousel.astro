---
// props: Array of case study cards

export interface Props {
  items: any[];
}

const { items = [] } = Astro.props;
---

<div class="relative w-full overflow-hidden mt-20 p-4 slideInUp">
  <div
    id="carousel-track"
    class="flex transition-transform duration-500 ease-in-out"
  >
    <!-- {
      items.map(item => (
        <div class="min-w-full md:min-w-fit md:w-fit w-20 p-4 box-border">
          <div class="border rounded-xl shadow-sm bg-white p-6 h-full flex flex-col items-center text-center">
            <img
              src={item.img}
              alt={item.alt}
              class="h-12 mb-4 object-contain"
            />
            <p class="text-sm text-gray-700 mb-4">{item.description}</p>
            <a
              href={item.link}
              class="text-blue-600 font-medium border border-blue-600 rounded px-4 py-2 hover:bg-blue-50 transition"
            >
              View Case Study
            </a>
          </div>
        </div>
      ))
    } -->

    <slot />
  </div>

  <!-- Navigation -->
  <button
    id="carousel-prev"
    class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-white p-2 shadow rounded-full"
  >
    ‹
  </button>
  <button
    id="carousel-next"
    class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-white p-2 shadow rounded-full"
  >
    ›
  </button>
</div>

<script>
  const track = document.getElementById("carousel-track") as HTMLElement;
  const prevBtn = document.getElementById("carousel-prev") as HTMLButtonElement;
  const nextBtn = document.getElementById("carousel-next") as HTMLButtonElement;

  let index = 0;
  const slides = track.children;
  const total = slides.length;

  const updateButtons = () => {
    const slidesPerView = Math.floor(track.offsetWidth / slides[0].offsetWidth);
    const maxIndex = total - slidesPerView;

    prevBtn.disabled = index === 0;
    nextBtn.disabled = index >= maxIndex;
  };

  const moveSlide = (direction: number) => {
    const offsetWidth = slides[0].offsetWidth;
    const carouselTrackWidth = track.offsetWidth;
    const scrollWidth = slides.length * offsetWidth;

    if (carouselTrackWidth >= scrollWidth || scrollWidth <= offsetWidth) return;

    const slidesPerView = Math.floor(carouselTrackWidth / offsetWidth);
    const maxIndex = total - slidesPerView;

    // Boundary checks
    if (
      (index === 0 && direction < 0) ||
      (index >= maxIndex && direction > 0)
    ) {
      return; // Reached start or end
    }

    index += direction;

    // Clamp to max index
    index = Math.min(index, maxIndex);

    track.style.transform = `translateX(-${index * offsetWidth}px)`;
    updateButtons();
  };

  prevBtn.addEventListener("click", () => moveSlide(-1));
  nextBtn.addEventListener("click", () => moveSlide(1));
</script>
